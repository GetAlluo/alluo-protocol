import { ethers, upgrades } from "hardhat";
import { AlluoStrategyHandler, AlluoStrategyHandler__factory, AlluoVoteExecutor, AlluoVoteExecutorUtils, AlluoVoteExecutor__factory, BeefyStrategy, BeefyStrategyUniversal, Exchange, IBeefyBoost, IBeefyVaultV6, IERC20, IERC20Metadata, IExchange, IPriceFeedRouter, IPriceFeedRouterV2, IWrappedEther, LiquidityHandler, PseudoMultisigWallet } from "../../typechain-types";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import { LiquidityHandlerCurrent, SpokePoolMock } from "../../typechain";
import { reset } from "@nomicfoundation/hardhat-network-helpers";

async function main() {
    let alluoVoteExecutor: AlluoVoteExecutor;
    let alluoStrategyHandler: AlluoStrategyHandler;
    let alluoVoteExecutorUtils: AlluoVoteExecutorUtils;
    let signers: SignerWithAddress[];
    let admin: SignerWithAddress;
    let pseudoMultiSig: PseudoMultisigWallet
    let spokePool: string;
    let _recipient: string;
    let _recipientChainId: string;
    let _relayerFeePct: number;
    let _slippageTolerance: number;
    let _exchange: Exchange;
    let priceRouter: IPriceFeedRouterV2;
    let weth: IWrappedEther;
    let usdc: IERC20Metadata;
    let beefyStrategy: BeefyStrategyUniversal;
    let ldo: IERC20Metadata;
    let liquidityHandler: LiquidityHandlerCurrent;

    let beefyVault: IBeefyVaultV6;
    let beefyBoost: IBeefyBoost;
    let beefyVaultLp: IERC20Metadata;

    await reset(process.env.POLYGON_FORKING_URL,
        42727415)
    //Set admin to me
    admin = await ethers.getSigner("0xABfE4d45c6381908F09EF7c501cc36E38D34c0d4");
    admin = await ethers.getImpersonatedSigner(admin.address);
    _exchange = await ethers.getContractAt(
        "Exchange",
        "0xeE0674C1E7d0f64057B6eCFe845DC2519443567F"
    ) as unknown as Exchange;
    priceRouter = await ethers.getContractAt("contracts/interfaces/IPriceFeedRouterV2.sol:IPriceFeedRouterV2", "0x82220c7Be3a00ba0C6ed38572400A97445bdAEF2") as IPriceFeedRouterV2;

    weth = await ethers.getContractAt(
        "contracts/interfaces/IWrappedEther.sol:IWrappedEther",
        "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619"
    ) as IWrappedEther;

    usdc = await ethers.getContractAt(
        "IERC20Metadata",
        "0x2791bca1f2de4661ed88a30c99a7a9449aa84174") as IERC20Metadata;

    spokePool = "0x9295ee1d8C5b022Be115A2AD3c30C72E34e7F096"    //Temp just for simulation
    _recipient = "0xa420b2d1c0841415A695b81E5B867BCD07Dff8C9"
    _recipientChainId = "10";
    _relayerFeePct = 757873726198165;
    _slippageTolerance = 300;
    //
    //
    pseudoMultiSig = await ethers.getContractAt("PseudoMultisigWallet", "0xF5bcDf59Db2b1f18C88287387f30ba9Acfb1Dc43") as PseudoMultisigWallet;
    alluoVoteExecutor = await ethers.getContractAt("AlluoVoteExecutor", "0xD15c966D754e64D2620Eb3160F847c081E9d1727") as AlluoVoteExecutor;
    alluoStrategyHandler = await ethers.getContractAt("AlluoStrategyHandler", "0x4378d507b5254B6f625De3b43Fa9ac90D85aB412") as AlluoStrategyHandler;
    alluoVoteExecutorUtils = await ethers.getContractAt("AlluoVoteExecutorUtils", "0xF7CBd495712c02E1A83987EF65F81204b15cc02B") as AlluoVoteExecutorUtils;
    beefyStrategy = await ethers.getContractAt("BeefyStrategyUniversal", "0x3BD9e8831F007528275741C1d0728699aB8bcBe1") as BeefyStrategyUniversal;


    // // OK lets upgrade the executor on polygon first
    // let executorFactory = await ethers.getContractFactory("AlluoVoteExecutor");
    // await alluoVoteExecutor.connect(admin).changeUpgradeStatus(true)
    // // let executor = await upgrades.upgradeProxy(alluoVoteExecutor.address, executorFactory);
    // let newCont = await executorFactory.deploy()
    // await alluoVoteExecutor.connect(admin).upgradeTo(newCont.address)
    // console.log("Executor upgraded")

    // let entryData4 = await beefyStrategy.encodeData("0x2F4BBA9fC4F77F16829F84181eB7C8b50F639F95", ethers.constants.AddressZero, 0, usdc.address)
    // let exitData4 = entryData4
    // let rewardsData4 = entryData4
    // await alluoStrategyHandler.connect(admin).setLiquidityDirection("BeefyMooStargateUsdcPolygon", 4, beefyStrategy.address, usdc.address, 0, 137, entryData4, exitData4, rewardsData4);


    // let tx = await alluoVoteExecutor.anyExecute("0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000028016213907ef6757234413fab0b81d2d560ecae143ba02cb6b198b4e0a292ee1480000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000006461c
    // // Ctach the logged event
    // let receipt = await tx.wait()
    // let event = receipt.events?.filter((x) => x.event == "logged")[0]
    // console.log("event", event)










    // // Now fork optimism and try put the same tx through:

    // let data = "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003006282e962f627cdb8ce2d4d773d4279372e6412ed0d9ce85be5e71f58b597ee080000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000006461eaa0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000002297229cb254bfc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    // await reset(process.env.OPTIMISM_URL, 98412630)
    // admin = await ethers.getImpersonatedSigner(admin.address);


    // alluoVoteExecutor = await ethers.getContractAt("AlluoVoteExecutor", "0x8522f392AA7Da316984D3b1F816E3b700773187f") as AlluoVoteExecutor;
    // alluoStrategyHandler = await ethers.getContractAt("AlluoStrategyHandler", "0xf669F4C895B0f15f96C6E07125f22CDdac3E01A3") as AlluoStrategyHandler;
    // alluoVoteExecutorUtils = await ethers.getContractAt("AlluoVoteExecutorUtils", "0xdbA78564d79CA6D831252B2BfD38f859521d4e94") as AlluoVoteExecutorUtils;
    // beefyStrategy = await ethers.getContractAt("BeefyStrategyUniversal", "0x90aa727b7ee79be2272e11698da9a211cd736db7") as BeefyStrategyUniversal;

    // // mooStargateUSDC Polygon
    // // Incorrectly setup before
    // let polygonUSDCAddress = "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
    // entryData4 = await beefyStrategy.encodeData("0x2F4BBA9fC4F77F16829F84181eB7C8b50F639F95", ethers.constants.AddressZero, 0, polygonUSDCAddress)
    // exitData4 = entryData4
    // rewardsData4 = entryData4
    // await alluoStrategyHandler.connect(admin).setLiquidityDirection("BeefyMooStargateUsdcPolygon", 4, beefyStrategy.address, polygonUSDCAddress, 0, 137, entryData4, exitData4, rewardsData4);


    // await alluoVoteExecutor.connect(admin).changeUpgradeStatus(true)
    // newCont = await executorFactory.deploy()
    // await alluoVoteExecutor.connect(admin).upgradeTo(newCont.address)
    // let tx2 = await alluoVoteExecutor.anyExecute(data);
    // receipt = await tx2.wait()
    // event = receipt.events?.filter((x) => x.event == "logged")[0]
    // console.log("event3", event)











    // // Now simulate the call back to the executor on polygon
    // await reset(process.env.POLYGON_FORKING_URL, 42727415)

    // pseudoMultiSig = await ethers.getContractAt("PseudoMultisigWallet", "0xF5bcDf59Db2b1f18C88287387f30ba9Acfb1Dc43") as PseudoMultisigWallet;
    // alluoVoteExecutor = await ethers.getContractAt("AlluoVoteExecutor", "0xD15c966D754e64D2620Eb3160F847c081E9d1727") as AlluoVoteExecutor;
    // alluoStrategyHandler = await ethers.getContractAt("AlluoStrategyHandler", "0x4378d507b5254B6f625De3b43Fa9ac90D85aB412") as AlluoStrategyHandler;
    // alluoVoteExecutorUtils = await ethers.getContractAt("AlluoVoteExecutorUtils", "0xF7CBd495712c02E1A83987EF65F81204b15cc02B") as AlluoVoteExecutorUtils;
    // beefyStrategy = await ethers.getContractAt("BeefyStrategyUniversal", "0x3BD9e8831F007528275741C1d0728699aB8bcBe1") as BeefyStrategyUniversal;

    // admin = await ethers.getImpersonatedSigner(admin.address);
    // let data2 = "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000320db3fb92d5ee127d8c81742c548d4088683f9364e32bf0d2e51e98e33195781b00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000006461ef1b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000002297229cb254bfc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000"
    // if (!data2) {
    //     console.log("Failed")
    //     return
    // }
    // await alluoVoteExecutor.connect(admin).changeUpgradeStatus(true)
    // newCont = await executorFactory.deploy()
    // await alluoVoteExecutor.connect(admin).upgradeTo(newCont.address)
    // let tx3 = await alluoVoteExecutor.anyExecute(data2);
    // receipt = await tx3.wait()

    // event = receipt.events?.filter((x) => x.event == "logged")[0]
    // console.log("event4", event)









    // // Now simulate the call back to the executor on optimism
    // await reset(process.env.OPTIMISM_URL, 98412630)

    // alluoVoteExecutor = await ethers.getContractAt("AlluoVoteExecutor", "0x8522f392AA7Da316984D3b1F816E3b700773187f") as AlluoVoteExecutor;
    // alluoStrategyHandler = await ethers.getContractAt("AlluoStrategyHandler", "0xf669F4C895B0f15f96C6E07125f22CDdac3E01A3") as AlluoStrategyHandler;
    // alluoVoteExecutorUtils = await ethers.getContractAt("AlluoVoteExecutorUtils", "0xdbA78564d79CA6D831252B2BfD38f859521d4e94") as AlluoVoteExecutorUtils;
    // beefyStrategy = await ethers.getContractAt("BeefyStrategyUniversal", "0x90aa727b7ee79be2272e11698da9a211cd736db7") as BeefyStrategyUniversal;

    // admin = await ethers.getImpersonatedSigner(admin.address);
    // let data3 = "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003200e6213e3c7d1257fdf01926affa1f4e44346a5f1985d7a17854d4ab47d12cddd0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000006461ea5f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000002297229cb254bfc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000"
    // if (!data3) {
    //     console.log("Failed")
    //     return
    // }
    // // Also upgrade the handler
    // let strategyHandlerFactory = await ethers.getContractFactory("AlluoStrategyHandler")
    // await alluoStrategyHandler.connect(admin).changeUpgradeStatus(true)
    // newCont = await strategyHandlerFactory.deploy()
    // await alluoStrategyHandler.connect(admin).upgradeTo(newCont.address)



    // await alluoVoteExecutor.connect(admin).changeUpgradeStatus(true)
    // newCont = await executorFactory.deploy()
    // await alluoVoteExecutor.connect(admin).upgradeTo(newCont.address)
    // let simData = "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003006282e962f627cdb8ce2d4d773d4279372e6412ed0d9ce85be5e71f58b597ee080000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000006461eaa0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000002297229cb254bfc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    // let simTx = await alluoVoteExecutor.anyExecute(simData);
    // let tx4 = await alluoVoteExecutor.anyExecute(data3);
    // receipt = await tx4.wait()
    // await alluoStrategyHandler.connect(admin).setLiquidityDirection("BeefyMooStargateUsdcPolygon", 4, beefyStrategy.address, usdc.address, 0, 137, entryData4, exitData4, rewardsData4);






    // let encodedMessage1 = await alluoVoteExecutorUtils.encodeLiquidityCommand("BeefyMooStargateUsdcPolygon", 0, 1);
    // let encodedMessage2 = await alluoVoteExecutorUtils.encodeLiquidityCommand("BeefyMooStargateUsdtPolygon", 2000, 1);
    // let encodedMessage3 = await alluoVoteExecutorUtils.encodeLiquidityCommand("BeefyMaiUsdcOptimism", 3000, 0);
    // let encodedMessage4 = await alluoVoteExecutorUtils.encodeLiquidityCommand("BeefyDolaMaiOptimism", 5000, 0);
    // let encodeAllMessages = await alluoVoteExecutorUtils.encodeAllMessages([encodedMessage1[0], encodedMessage2[0], encodedMessage3[0], encodedMessage4[0]], [encodedMessage1[1], encodedMessage2[1], encodedMessage3[1], encodedMessage4[1]]);
    // await alluoVoteExecutor.connect(admin).submitData(encodeAllMessages.inputData);
    // await alluoVoteExecutor.connect(admin).setMinSigns(0)
    // let bigTx = await alluoVoteExecutor.connect(admin).executeSpecificData(0);
    // receipt = await bigTx.wait();
    // event = receipt.events?.filter((x) => x.event == "logged")[0]
    // console.log("event", event)

    // // bridge over 31 usdc simulated

    // usdc = await ethers.getContractAt(
    //     "IERC20Metadata",
    //     "0x7f5c764cbc14f9669b88837ca1490cca17c31607") as IERC20Metadata;
    // _exchange = await ethers.getContractAt(
    //     "Exchange",
    //     "0x66Ac11c106C3670988DEFDd24BC75dE786b91095"
    // ) as unknown as Exchange;


    // // swap some eth into usd
    // signers = await ethers.getSigners();
    // await _exchange.connect(signers[0]).exchange(ethers.constants.AddressZero, usdc.address, ethers.utils.parseEther("1"), 0, { value: ethers.utils.parseEther("1") });
    // await usdc.connect(signers[0]).transfer(alluoVoteExecutor.address, ethers.utils.parseUnits("31", 6))

    // // Now executeDeposits

    // let executorSigner = await ethers.getImpersonatedSigner(alluoVoteExecutor.address)
    // await signers[0].sendTransaction({ to: alluoVoteExecutor.address, value: ethers.utils.parseEther("1") })
    // await usdc.connect(executorSigner).approve(alluoStrategyHandler.address, ethers.utils.parseUnits("31", 6));
    // await alluoStrategyHandler.connect(executorSigner).executeQueuedDeposits(0);








    // Simulate polygonstuff


    // Now simulate the call back to the executor on polygon
    await reset(process.env.POLYGON_FORKING_URL, 42727415)
    usdc = await ethers.getContractAt(
        "IERC20Metadata",
        "0x2791bca1f2de4661ed88a30c99a7a9449aa84174") as IERC20Metadata;

    pseudoMultiSig = await ethers.getContractAt("PseudoMultisigWallet", "0xF5bcDf59Db2b1f18C88287387f30ba9Acfb1Dc43") as PseudoMultisigWallet;
    alluoVoteExecutor = await ethers.getContractAt("AlluoVoteExecutor", "0xD15c966D754e64D2620Eb3160F847c081E9d1727") as AlluoVoteExecutor;
    alluoStrategyHandler = await ethers.getContractAt("AlluoStrategyHandler", "0x4378d507b5254B6f625De3b43Fa9ac90D85aB412") as AlluoStrategyHandler;
    alluoVoteExecutorUtils = await ethers.getContractAt("AlluoVoteExecutorUtils", "0xF7CBd495712c02E1A83987EF65F81204b15cc02B") as AlluoVoteExecutorUtils;
    beefyStrategy = await ethers.getContractAt("BeefyStrategyUniversal", "0x3BD9e8831F007528275741C1d0728699aB8bcBe1") as BeefyStrategyUniversal;
    let strategyHandlerFactory = await ethers.getContractFactory("AlluoStrategyHandler") as AlluoStrategyHandler__factory;
    let executorFactory = await ethers.getContractFactory("AlluoVoteExecutor") as AlluoVoteExecutor__factory;

    admin = await ethers.getImpersonatedSigner(admin.address);

    // Also upgrade the handler
    await alluoStrategyHandler.connect(admin).changeUpgradeStatus(true)
    let newCont = await strategyHandlerFactory.deploy()
    await alluoStrategyHandler.connect(admin).upgradeTo(newCont.address)

    let entryData4 = await beefyStrategy.encodeData("0x2F4BBA9fC4F77F16829F84181eB7C8b50F639F95", ethers.constants.AddressZero, 0, usdc.address)
    let exitData4 = entryData4
    let rewardsData4 = entryData4
    await alluoStrategyHandler.connect(admin).setLiquidityDirection("BeefyMooStargateUsdcPolygon", 4, beefyStrategy.address, usdc.address, 0, 137, entryData4, exitData4, rewardsData4);



    let data99 = "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004600000000000000000000000000000000000000000000000000000000000000400e548e6ead5cdaa2d7d96c46bbec93a0786a6656f7a578e6f6ab401b296d55de10000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000006461ef20000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002cd0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    let prevDataUpdatingInfo = "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000320db3fb92d5ee127d8c81742c548d4088683f9364e32bf0d2e51e98e33195781b00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000006461ef1b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000002297229cb254bfc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000"
    await alluoVoteExecutor.connect(admin).changeUpgradeStatus(true)
    let newCont2 = await executorFactory.deploy()
    await alluoVoteExecutor.connect(admin).upgradeTo(newCont2.address)
    let tx98 = await alluoVoteExecutor.anyExecute(prevDataUpdatingInfo);
    await alluoVoteExecutor.connect(admin).setMinSigns(0)
    let tx99 = await alluoVoteExecutor.anyExecute(data99);

    // Withdrawal processed.
    // Check usdc balance of the executor
    let balanceUsdc = await usdc.balanceOf(alluoVoteExecutor.address)
    console.log("balanceUsdc", Number(balanceUsdc) / 10 ** 6)

    // Execute deposits
    let executorSigner = await ethers.getImpersonatedSigner(alluoVoteExecutor.address)
    signers = await ethers.getSigners();
    await signers[0].sendTransaction({ to: alluoVoteExecutor.address, value: ethers.utils.parseEther("10") })
    await usdc.connect(executorSigner).approve(alluoStrategyHandler.address, ethers.utils.parseUnits("31", 6));
    await alluoStrategyHandler.connect(executorSigner).executeQueuedDeposits(0);



    await alluoVoteExecutor.connect(admin).triggerBridging();
    balanceUsdc = await usdc.balanceOf(alluoVoteExecutor.address)

    console.log("balanceUsdc after br", Number(balanceUsdc) / 10 ** 6)


    // receipt = await tx99.wait()

    // event = receipt.events?.filter((x) => x.event == "logged")[0]
    // console.log("event99", event)













    // let functionData = await alluoStrategyHandler.populateTransaction.executeQueuedDeposits(0)
    // console.log("functionData", functionData.data);
    // await alluoVoteExecutor.connect(admin).multicall([alluoStrategyHandler.address], [functionData.data as string])

    //     Message index 2
    // directionId 4
    // percent 0
    // executorLocalId 1

    // Message index 2
    // directionId 4
    // percent 2000
    // executorLocalId 1


}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });

//npx hardhat run scripts/deploy/deployHandler.ts --network polygon
//npx hardhat verify 0xb647c6fe9d2a6e7013c7e0924b71fa7926b2a0a3 --network polygon